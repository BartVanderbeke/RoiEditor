"""packages the project as z zip

The script ignores files using the .gitignore criteria
The script has kindly been generated by chatGPT

"""

import os
import zipfile
from pathlib import Path
import argparse

ROOT = Path(__file__).resolve().parent
ZIP_NAME = ROOT / "RoiEditor.zip"

def parse_gitignore(gitignore_path):
    patterns = set()
    if gitignore_path.exists():
        with gitignore_path.open() as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    patterns.add(line)
    return patterns

def is_ignored(path, ignore_patterns):
    from fnmatch import fnmatch
    rel_path = path.relative_to(ROOT).as_posix()
    for pattern in ignore_patterns:
        if fnmatch(rel_path, pattern) or fnmatch(path.name, pattern):
            return True
    return False

def collect_files_to_zip(base_paths, ignore_patterns):
    files = []
    for base in base_paths:
        if base.is_file():
            if not is_ignored(base, ignore_patterns):
                files.append((base, base.name))
        elif base.is_dir():
            for path in base.rglob("*"):
                if path.is_file() and not is_ignored(path, ignore_patterns):
                    arcname = path.relative_to(ROOT)
                    files.append((path, arcname.as_posix()))
    return files

def main(dry_run=False):
    ignore_patterns = parse_gitignore(ROOT / ".gitignore")

    base_items = [ROOT / "RoiEditor", ROOT / "assets"]
    base_items.extend([p for p in ROOT.iterdir() if p.is_file()])

    files = collect_files_to_zip(base_items, ignore_patterns)

    if dry_run:
        print("Dry run: the following files would be added to the zip:")
        for file_path, arcname in files:
            print(f"  {arcname}")
        print(f"Total: {len(files)} files (no zip created).")
    else:
        with zipfile.ZipFile(ZIP_NAME, "w", zipfile.ZIP_DEFLATED) as zipf:
            for file_path, arcname in files:
                zipf.write(file_path, arcname)
        print(f"Created: {ZIP_NAME} ({len(files)} files)")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create RoiEditor.zip with project contents.")
    parser.add_argument("-n", "--dry-run", action="store_true", help="List files without creating the zip.")
    args = parser.parse_args()

    main(dry_run=args.dry_run)
